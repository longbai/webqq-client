#!/usr/bin/env coffee

Read = require 'read'
{EventEmitter} = require 'events'

QQ    = require '..'

Fs       = require 'fs'
OptParse = require 'optparse'

Switches = [
    [ "-h", "--help",            "Display the help information" ],
    [ "-v", "--version",         "Displays the version of webqq-client installed" ]
]

Options = {}

class Shell
    constructor:() ->
        @events = new EventEmitter
        @count = 0
    # Public: A wrapper around the EventEmitter API to make usage
    # semanticly better.
    #
    # event    - The event name.
    # listener - A Function that is called with the event parameter
    #            when event happens.
    #
    # Returns nothing.
    on: (event, args...) ->
        @events.on event, args...

    # Public: A wrapper around the EventEmitter API to make usage
    # semanticly better.
    #
    # event   - The event name.
    # args...  - Arguments emitted by the event
    #
    # Returns nothing.
    emit: (event, args...) ->
        @events.emit event, args...

    startQQ: (id, pwd) ->
        @qq = QQ.load(id, pwd)

        @qq.on 'captcha', (data)->

        @qq.on 'login', ->
            #destroy captcha

        @qq.on 'quit', ->
            console.log('qq quit')

        @qq.on 'error', (err)=>
            console.log @count, err
            @count = @count + 1
        @qq.on 'ready', (err)=>
            console.log 'ready'
            @status = 'ready'
            @repl.setPrompt ":#{id}>"
            @repl.promt()
        @qq.run()

    parseCmd: (cmd)->
        switch cmd
            when 'info'
                console.log 'info'

            when 'touin'
                console.log 'touin'
            when 'toid'
                console.log 'toid'

            when 'toname'
                console.log 'toname'

            when 'toguin'
                console.log 'toguin'

            when 'friends'
                console.log 'friends'; @qq.friends()

    run: ->
        self = @

        process.on 'uncaughtException', (err) =>
            console.log err.stack

        @on 'password', =>
            Read {prompt: "Password: ", silent: true}, (er, pwd)=>
                @startQQ(@qqId, pwd)
                console.log 'waiting...'

        Read {prompt: "QQ: "}, (er, qq)=>
            @qqId = qq
            @emit 'password'


unless process.platform is "win32"
    process.on 'SIGTERM', ->
        process.exit 0

Parser = new OptParse.OptionParser(Switches)
Parser.banner = "Usage qqcli [options]"

Parser.on "help", (opt, value) ->
    console.log Parser.toString()
    process.exit 0

Parser.on "version", (opt, value) ->
    Options.version = true

Parser.parse process.argv

if Options.version
    console.log QQ.version()
    process.exit 0

shell = new Shell()
shell.run()
