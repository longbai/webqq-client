#!/usr/bin/env coffee

Readline = require 'readline'

QQ    = require '..'

Fs       = require 'fs'
OptParse = require 'optparse'

Switches = [
    [ "-h", "--help",            "Display the help information" ],
    [ "-v", "--version",         "Displays the version of webqq-client installed" ]
]

Options = {}

class Shell
    startQQ: (id, pwd)->
        @qq = QQ.load(id, pwd)
        qq.on 'captcha', (data)->

        qq.on 'login', ->
            #destroy captcha

        qq.on 'quit', ->
            console.log('qq quit')

        qq.on 'error', (err)->
            console.log err
        qq.on 'ready', (err)->
            console.log 'ready'
            @status = 'ready'
            @repl.setPrompt ":#{@qq}>"
            @repl.promt()
        qq.run()

    parseCmd: (cmd)->
        switch cmd
            when 'info' then console.log 'info'

            when 'touin' then console.log 'touin'
            when 'toid' then console.log 'toid'

            when 'toname' then console.log 'toname'

            when 'toguin' then console.log 'toguin'

            when 'friends' then console.log 'friends'; @qq.friends()

    run: ->
        self = @
        stdin = process.openStdin()
        stdout = process.stdout

        process.on 'uncaughtException', (err) =>
            @robot.logger.error err.stack

        @repl = Readline.createInterface stdin, stdout, null

        @repl.on 'close', =>
            stdin.destroy()
            process.exit 0

        @repl.on 'line', (buffer) =>
            @repl.close() if buffer.toLowerCase() is 'exit'
            input = buffer.toString()
            switch @status
                when 'waitQQ' then @qqId = input; @repl.setPrompt ":>please input qq password:"
                when 'waitPwd' then pwd = input; @repl.setPrompt ":>waiting ..."; @startQQ(@qqId, pwd)
                when 'ready' then console.log 'ready'
            @repl.prompt()

        self.emit 'connected'

        @repl.setPrompt ">please input qq number:"
        @status = 'waitQQ'
        @repl.prompt()

unless process.platform is "win32"
    process.on 'SIGTERM', ->
        process.exit 0

Parser = new OptParse.OptionParser(Switches)
Parser.banner = "Usage qqcli [options]"

Parser.on "help", (opt, value) ->
    console.log Parser.toString()
    process.exit 0

Parser.on "version", (opt, value) ->
    Options.version = true

Parser.parse process.argv

if Options.version
    console.log QQ.version()
    process.exit 0

